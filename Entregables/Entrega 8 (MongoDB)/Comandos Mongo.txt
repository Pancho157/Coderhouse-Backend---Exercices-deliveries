----------------- Iniciar el servidor -------------------

mongod dbpath "path\to\BBDD"

----------------- Conectarse al servidor -------------------

mongosh

----------------- Selecciona BBDD (y la genera si no existe) -------------------

use ecommerce



----------------- Ingreso de productos a la tabla de productos (Y genera la tabla en caso de no existir) -------------------


db.createCollection("products", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "timestamp",
        "title",
        "code",
        "thumbnail",
        "price",
        "stock",
      ],
      properties: {
        _id: {
          bsonType: "int",
          minimum: 1,
          description: "Must be a interger and is required",
        },
        timestamp: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        title: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        description: {
          bsonType: "string",
          description: "Must be a string",
        },
        code: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        thumbnail: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        price: {
          bsonType: "int",
          minimum: 100,
          maximum: 5000,
          description: "Must be a interger and is required",
        },
        stock: {
          bsonType: "int",
          minimum: 1,
          description: "Must be a interger and is required",
        },
      },
    },
  },
});


db.products.insert({_id: 1, timestamp: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), title: "", description: "", code: "20", thumbnail: "", price: 3, stock: 9})

db.products.insertMany([{_id: 8, timestamp: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), title: "", description: "", code: "20", thumbnail: "", price: 3, stock: 9},
{_id: 9, timestamp: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), title: "", description: "", code: "20", thumbnail: "", price: 3, stock: 9}])


Al hacer db.products.find() devuelve los 10 productos agregados a la tabla



----------------- Ingreso de mensajes a la tabla de mensajes (Y genera la tabla en caso de no existir) -------------------

db.createCollection("messages", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "timestamp",
        "title",
        "code",
        "thumbnail",
        "price",
        "stock",
      ],
      properties: {
        _id: {
          bsonType: "int",
          minimum: 1,
          description: "Must be a interger and is required",
        },
        timestamp: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        email: {
          bsonType: "string",
          description: "Must be a string and is required",
        },
        message: {
          bsonType: "string",
          description: "Must be a string",
        },
      },
    },
  },
});


db.messages.insert([
  { _id: 1, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Primer mensaje" },
  { _id: 2, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Segundo mensaje" },
  { _id: 3, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Terccer mensaje" },
  { _id: 4, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Cuarto mensaje" },
  { _id: 5, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Quinto mensaje" },
  { _id: 6, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Sexto mensaje" },
  { _id: 7, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Septimo mensaje" },
  { _id: 8, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Octavo mensaje" },
  { _id: 9, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Noveno mensaje" },
  { _id: 10, email: "emailDePrueba@gmail.com", date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "), message: "Decimo mensaje" },
]);

Al guardar las fechas utilicé el código de debajo (comprobé que funciona)

new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" ")
Como se guarda => '21/9/2022 09:04:39,GMT-0300,(hora,estándar,de,Argentina)'


Al hacer db.messages.find() devuelve los 10 mensajes agregados a la tabla



----------------- Agregar el campo "price" a los productos (Entre 100 y 5000) -------------------

db.products.aggregate([
  { $set: { price: { $multiply: [{ $rand: {} }, 4900] } } },
  { $set: { price: { $floor: "$price" } } },
  { $set: { price: { $sum: ["$price", 100] } } },
  { $merge: "products" },
]);

Básicamente es la fórmula => "price": Math.floor(Math.random()*(max - min) + min)


----------------- Listar todos los documentos de cada colección -------------------

db.messages.find()
db.products.find()


----------------- Muestra la cantidad de documentos almacenados -------------------

db.messages.countDocuments()
db.products.countDocuments()


----------------- Agrega un documento a la colección de productos -------------------


db.products.insert({
  _id: 11,
  title: 'Producto agregado',
  thumbnail: 'url',
  stock: 14,
  price: 354
})


db.messages.insert({
  _id: 11,
  email: 'emailDePrueba@gmail.com',
  date: new Date().toLocaleDateString() + " " + new Date().toTimeString().split(" "),
  message: 'Nuevo mensaje agregado'
})

----------------- Consulta por un documento específico -------------------

db.products.find({_id: 10})

No funciona si en "_" antes del id, ya que esta es la llave primaria que utilicé para los productos y los mensajes


----------------- Agrega un documento a la colección de productos -------------------



